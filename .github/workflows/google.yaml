# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# # env:
# #   PROJECT_ID: cryptic-album-384006
# #   REGION: us-central1
# #   CLUSTER_NAME: cluster-1
# #   SERVICE_ACCOUNT_EMAIL: my-service-account@cryptic-album-384006.iam.gserviceaccount.com

# # jobs:
# #   build-and-deploy:
# #     runs-on: ubuntu-latest

# #     steps:
# #     # Checkout the repository
# #     - name: Checkout
# #       uses: actions/checkout@v2

# #     # Authenticate to GCP using Service Account
# #     - name: Authenticate to GCP
# #       uses: google-github-actions/auth@v0.5.0
# #       with:
# #         credentials: ${{ secrets.GCP_SA_KEY }}
# #         project_id: ${{ env.PROJECT_ID }}
# #         export_default_credentials: true
# env:
#   PROJECT_ID: cryptic-album-384006
# #   GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
# #   GKE_CLUSTER: cluster-1    # TODO: update to cluster name
# #   GKE_ZONE: us-central1-c   # TODO: update to cluster zone
# #   DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
# #   REPOSITORY: samples # TODO: update to Artifact Registry docker repository
# #   IMAGE: static-site

# jobs:
#   setup-build-publish-deploy:
#     name: Setup, Build, Publish, and Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     #Configure Workload Identity Federation and generate an access token.
#     - id: 'auth1'
#       name: 'Authenticate to Google Cloud'
#       uses: 'google-github-actions/auth@v0'
#       with:
#         token_format: 'access_token'
#         workload_identity_provider: 'projects/751877015255/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#         service_account: 'my-service-account@cryptic-album-384006.iam.gserviceaccount.com'

#     # Alternative option - authentication via credentials json
# #     - id: 'auth'
# #       uses: 'google-github-actions/auth@v0'
# #       with:
# #         credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

#     # Build every microservice using Docker
#     - name: Build microservices
#       run: |
#         docker build -t  gcr.io/${{ env.PROJECT_ID }}/microservice-1:${{ github.sha }} ./microservice-1 -f /Devops-task/productcatalogue/Dockerfile
#         docker build -t gcr.io/${{ env.PROJECT_ID }}/microservice-2:${{ github.sha }} ./microservice-2  -f Devops-task/stockmanager/Dockerfile
#         docker build -t gcr.io/${{ env.PROJECT_ID }}/microservice-3:${{ github.sha }} ./microservice-3   -f Devops-task/shopfront/Dockerfile

#     # Push Docker image to Google Container Registry
#     - name: Push images to GCR
#       run: |
#         docker push gcr.io/${{ env.PROJECT_ID }}/microservice-1:${{ github.sha }}
#         docker push gcr.io/${{ env.PROJECT_ID }}/microservice-2:${{ github.sha }}
#         docker push gcr.io/${{ env.PROJECT_ID }}/microservice-3:${{ github.sha }}
        
#     - name: Deploy microservices to GKE cluster
#       uses: google-github-actions/setup-gcloud@v0.5.0
#       with:
#         version: '323.0.0'
#         project_id: ${{ env.PROJECT_ID }}
#         service_account_email: ${{ env.SERVICE_ACCOUNT_EMAIL }}
#         export_default_credentials: true
#       env:
#         GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GKE_SA_KEY }}

#     # Deploy every service to Kubernetes cluster on GCP using HELM
#     - name: Deploy microservices to GKE cluster
#       uses: google-github-actions/setup-gcloud@v0.5.0
#       with:
#         version: '323.0.0'
#         project_id: ${{ env.PROJECT_ID }}
#         service_account_email: ${{ env.SERVICE_ACCOUNT_EMAIL }}
#         export_default_credentials: true
#       env:
#         GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GKE_SA_KEY }}
        
#     -  name: run services on gke
#        run: |
#         gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --region ${{ env.REGION }}
#         helm upgrade --install microservice-1 ./microservice-1/helm-chart
#         helm upgrade --install microservice-2 ./microservice-2/helm-chart
#         helm upgrade --install microservice-3 ./microservice-3/helm-chart


name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{secrets.GKE_PROJECT}}
  GKE_CLUSTER: cluster-1
  GKE_ZONE: us-central1-c
  DEPLOYMENT_NAME: product-catalogue 
  IMAGE: github-actions-gke-image
  TAG: 1.0.0

jobs:
  setup-build-publish-deploy:
    name: Setup Build Publish Deploy
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2
 
      - name: Authenticate with Google Cloud
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: your-project-id
          service_account_key: ${{ secrets.GKE_SA_KEY }}


     
      - name: Setup Google Cloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          service_account_key: ${{secrets.GKE_SA_KEY}}
          project_id: ${{secrets.GKE_PROJECT}}
          
      - name: Run a test
        run: |
          gcloud components list
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt update
          sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
          echo "##vso[task.setvariable variable=USE_GKE_GCLOUD_AUTH_PLUGIN]True"
          gcloud components list

      - name: Configure Docker
        run: |-
          gcloud --quiet auth configure-docker
      - name: Get GKE Credentials
        run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      - name: Build Docker Image
        run: |-
          docker build -t gcr.io/$PROJECT_ID/$IMAGE:$TAG -f /home/runner/work/Devops-task/Devops-task/productcatalogue/Dockerfile /home/runner/work/Devops-task/Devops-task/productcatalogue/.
      - name: Publish Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$TAG"
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
      - name: Deploy Image to GKE cluster
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$TAG
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
